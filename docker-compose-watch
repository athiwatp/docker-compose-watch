#! /bin/bash

deps=
if ! which yaml2json &> /dev/null; then
  echo "This script requires that yaml2json be installed (https://github.com/bronze1man/yaml2json)"
  deps=1
fi

if ! which docker-compose $FILES $PROJECT &> /dev/null; then
  echo "This script requires that docker-compose $FILES $PROJECT be installed (https://github.com/docker/compose/blob/master/docs/install.md)"
  deps=1
fi

if ! which fswatch &> /dev/null; then
  echo "This script requires that fswatch be installed (brew install fswatch)"
  deps=1
fi

if ! which jq &> /dev/null; then
  echo "This script requires that jq be installed (brew install jq)"
  deps=1
fi

if ! which gdate &> /dev/null; then
  echo "This script requires the GNU coreutils date command (brew install coreutils)"
  deps=1
fi

if [[ "$deps" == "1" ]]; then exit 1; fi

function cleanup {
  docker-compose $FILES $PROJECT stop $SERVICES

  echo
  echo "Stopping tails $(jobs -p | tr '\n' ' ')"
  echo "..."

  # Using `sh -c` so that if some have exited, that error will
  # not prevent further tails from being killed.
  jobs -p | tr '\n' ' ' | xargs -I % sh -c "kill % &>/dev/null || true"

  echo "Done"

  exit 0
}

SERVICES=
LOGS=
EXCLUDES=
FILES=
PROJECT=
VOLUMES=
BUILD=

project_name=$(basename $PWD)

while [ "$1" != "" ]; do
  PARAM=`printf "%s\n" "$1" | awk -F= '{print $1}'`
  VALUE=`printf "%s\n" "$1" | awk -F= '{print $2}'`
  case $PARAM in
    -h | --help)
      usage
      exit
      ;;
    -l | --log)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      LOGS="$LOGS $VALUE"
      ;;
    -f | --file)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      FILES="$FILES -f $VALUE"
      ;;
    -p | --project-name)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      project_name=$VALUE
      PROJECT="-p $VALUE"
      ;;
    -b | --build)
      BUILD="--build"
      ;;
    -v | --volumes)
      VOLUMES="true"
      ;;
    *)
      if [[ "${PARAM:0:1}" == "-" ]]; then
        echo "ERROR: unknown parameter \"$PARAM\""
        usage
        exit 1
      fi
      SERVICES="$SERVICES $PARAM"
      ;;
  esac
  shift
done

function watchdog {
  cmd="fswatch -0 -e '.*' `echo "$1"` -r `pwd`"
  while read -d "" event; do
    echo "file $event was changed"
    if echo $event | grep -iE 'docker|package.json|makefile' &>/dev/null; then docker-compose $FILES $PROJECT up -d ${BUILD} $2;
    else docker-compose $FILES $PROJECT restart -t0 $2; fi
  done < <(eval "$cmd")
}

function usage {
  echo "figure it out"
}

config=$(docker-compose $FILES $PROJECT config)
SERVICES=${SERVICES:-$(echo "$config" | yaml2json | jq -r '.services | keys[]' 2>/dev/null)}
LOGS=${LOGS:-$SERVICES}

for service in $SERVICES; do
  includes="-i Dockerfile -i package.json -i Makefile -i docker-compose"
  volumes=$(echo "$config" | yaml2json | jq -r ".services | to_entries | .[] | select(.key == \"$service\") | .value.volumes[]" 2>/dev/null)
  for volume in $volumes; do
    host=$(echo $volume | awk -F: '{ print $1 }')
    container=$(echo $volume | awk -F: '{ print $2 }')
    opts=$(echo $volume | awk -F: '{ print $3 }')
    if [[ "$VOLUMES" == "true" && "${host:0:1}" == "/" && "${container:0:1}" == "/" ]]; then
      echo "watching $host for $service"
      includes="$includes -i $host.*"
    fi
  done
  if [[ "$includes" != "" ]]; then
    watchdog "$includes" $service &
  fi
done

last=$(gdate -u +%Y-%m-%dT%H:%M:%S.%NZ)
docker-compose $FILES $PROJECT up --build -d $SERVICES

trap cleanup SIGINT SIGTERM

pname_len=$(echo "$project_name" | wc -c | tr -d ' ')
containers=$(docker-compose $FILES $PROJECT ps $LOGS 2>/dev/null | tail -n +3 | grep -v Exit | awk '{ print $1 }')

max_len=0
while read -r name; do
  container=$(echo $name | cut -c $((pname_len + 1))-)
  service=$(echo $container | sed -e 's/_[0123456789]\+$//g')

  container_len=$(echo $container | wc -c | tr -d ' ')
  service_len=$(echo $service | wc -c | tr -d ' ')

  scale=$(echo "$container" | cut -c $((service_len + 1))-)

  if [[ $container_len > $max_len ]]; then
    max_len=$container_len
  fi
done <<< "$containers"

DIM="\033[2m"
COLORS=("\033[1;31m" "\033[1;32m" "\033[1;33m" "\033[1;34m" "\033[1;35m" "\033[1;36m" "\033[1;37m" "\033[1;39m" "\033[1;30m")
COLOR_COUNT=${#COLORS[@]}
CLOSE="\033[0m"

index=0
while read -r name; do
  color=${COLORS[$index]}

  container=$(echo $name | cut -c $((pname_len + 1))-)
  service=$(echo $container | sed -e 's/_[0123456789]\+$//g')

  container_len=$(echo $container | wc -c | tr -d ' ')
  service_len=$(echo $service | wc -c | tr -d ' ')

  scale=$(echo "$container" | cut -c $((service_len + 1))-)

  formatted_container=$(printf "%${max_len}s" $container)

  eval "
    lst=$last
    while true; do

      # Check that container hasn't exited
      alive=\$(docker ps -a --format '{{ .Names }} {{ .Status }}' | grep $name | grep -v Exit)
      if [[ \"\$alive\" == \"\" ]]; then
        echo -e \" ${DIM} closing logstream because container $container has exited${CLOSE}\"
        exit 0
      fi

      # Stream container logs
      while read -r line; do
        echo -e \"$color$formatted_container |$CLOSE \$line\"
      done < <(gstdbuf -oL docker logs -f --since \$lst \"$name\")

      # Reattach on exit
      echo -e \" ${DIM} reattaching to logstream of $container${CLOSE}\"
      lst=\$(gdate -u +%Y-%m-%dT%H:%M:%S.%NZ)
      sleep 2

    done &"

  index=$(((index + 1) % COLOR_COUNT))
done <<< "$containers"

wait
