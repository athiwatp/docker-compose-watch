#! /bin/bash

deps=
if ! which yaml2json &> /dev/null; then
  echo "This script requires that yaml2json be installed (https://github.com/bronze1man/yaml2json)"
  deps=1
fi

if ! which docker-compose $FILES $PROJECT &> /dev/null; then
  echo "This script requires that docker-compose $FILES $PROJECT be installed (https://github.com/docker/compose/blob/master/docs/install.md)"
  deps=1
fi

if ! which fswatch &> /dev/null; then
  echo "This script requires that fswatch be installed (brew install fswatch)"
  deps=1
fi

if ! which jq &> /dev/null; then
  echo "This script requires that jq be installed (brew install jq)"
  deps=1
fi

if ! which gdate &> /dev/null; then
  echo "This script requires the GNU coreutils date command (brew install coreutils)"
  deps=1
fi

if [[ "$deps" == "1" ]]; then exit 1; fi

function cleanup {
  docker-compose $FILES $PROJECT stop $SERVICES
  exit 0
}

SERVICES=
LOGS=
EXCLUDES=
FILES=
PROJECT=

while [ "$1" != "" ]; do
  PARAM=`printf "%s\n" "$1" | awk -F= '{print $1}'`
  VALUE=`printf "%s\n" "$1" | awk -F= '{print $2}'`
  case $PARAM in
    -h | --help)
      usage
      exit
      ;;
    -l | --log)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      LOGS="$LOGS $VALUE"
      ;;
    -f | --file)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      FILES="$FILES -f $VALUE"
      ;;
    -p | --project-name)
      if [[ "$VALUE" == "" ]]; then
        shift
        VALUE=$1
      fi
      PROJECT="-p $VALUE"
      ;;
    *)
      if [[ "${PARAM:0:1}" == "-" ]]; then
        echo "ERROR: unknown parameter \"$PARAM\""
        usage
        exit 1
      fi
      SERVICES="$SERVICES $PARAM"
      ;;
  esac
  shift
done

function watchdog {
  while read -d "" event; do
    echo "file $event was changed"
    if echo $event | grep -i docker; then docker-compose $FILES $PROJECT up -d $2;
    else docker-compose $FILES $PROJECT restart -t0 $2; fi
  done < <(fswatch -0 -e '.*' $1 -r `pwd`)
}

function usage {
  echo "get help"
}

config=$(docker-compose $FILES $PROJECT config)
SERVICES=${SERVICES:-$(echo "$config" | yaml2json | jq -r '.services | keys[]')}
LOGS=${LOGS:-$SERVICES}

for service in $SERVICES; do
  includes=
  volumes=$(echo "$config" | yaml2json | jq -r ".services | to_entries | .[] | select(.key == \"$service\") | .value.volumes[]")
  for volume in $volumes; do
    host=$(echo $volume | awk -F: '{ print $1 }')
    container=$(echo $volume | awk -F: '{ print $2 }')
    opts=$(echo $volume | awk -F: '{ print $3 }')
    if [[ "${host:0:1}" == "/" && "${container:0:1}" == "/" ]]; then
      echo "watching $host for $service"
      includes="$includes -i $host.*"
    fi
  done
  if [[ "$includes" != "" ]]; then
    watchdog "$includes" $service &
  fi
done

last=$(gdate -u +%Y-%m-%dT%H:%M:%S.%NZ)
docker-compose $FILES $PROJECT up --build -d $SERVICES

trap cleanup SIGINT SIGTERM

while true; do
  while read -r line; do
    timestamp=$(echo $line | awk '{ print $3 }')
    if [[ "$timestamp" > "$last" ]]; then
      if echo $line | awk '{ print $2 }' | grep '|' &> /dev/null; then
        echo $line | awk '!($3="")' | sed 's/  / /'
      else
        echo $line
      fi
    fi
  done < <(gstdbuf -oL docker-compose $FILES $PROJECT logs --tail 100 -f -t $LOGS)
  last=$(gdate -u +%Y-%m-%dT%H:%M:%S.%NZ)
  sleep 2
done
